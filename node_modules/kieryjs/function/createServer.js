// import all package
const _e = require('express');
const chalk = require('chalk');
const path = require('path')
const app = _e();
var escapeHtml = require('escape-html');
var fs = require('fs');
var marked = require('marked');

// create the function "createServer"
function createServer(config) {
    port = config.port; // get the port
    index = config.index; // get the index
    includeVariableOnPage = config.includeVariableOnPage; // get if he include variable
    engine = config.engine // get the engine using
    staticFolder = config.staticFolder; // get the static folder

    // support Markdown file
    app.engine('md', function (path, options, fn) {
        fs.readFile(path, 'utf8', function (err, str) {
            if (err) return fn(err);
            var html = marked.parse(str).replace(/\{([^}]+)\}/g, function (_, name) {
                return escapeHtml(options[name] || '');
            });
            fn(null, html);
        });
    }); 
    
    if (engine === 'all'){ // if it's 'all' then set engine to all engine supported (ejs, md, ext...)
        app.set('view engine', 'md');
        app.set('view engine', 'ejs')
    } else { // else use the engine set
        app.set('view engine', engine);
    }



    app.use(_e.static(staticFolder)); // use the static middleware function
    app.use('/static', _e.static(path.join('../', staticFolder))); // set the path for see the files

    if (includeVariableOnPage === true) { // if includeVariableOnPage is true
        varPage = config.varPage;
        app.get('/', (req, res) => {
            res.render(`../views/${index}`, varPage);
        });
    } else if (includeVariableOnPage === false) { // if includeVariableOnPage is false
        app.get('/', (req, res) => {
            res.render(`../views/${index}`);
        });
    } else {
        console.log(chalk.red('[ERROR] The createServer() function on the param "config.includeVariableOnPage" is not a boolean.'));
        app.get('/' + path, (req, res) => {
            res.send('<h2 style="color: red">[ERROR] The createServer() function on the param "config.includeVariableOnPage" is not a boolean.</h2>')
        })
    }
    // listen at port set
    app.listen(port, () => {
        console.log(chalk.yellow('[!] Server Build...'))
        setTimeout(function () {
            console.log(chalk.greenBright('[!] Server open on ', chalk.bgWhiteBright('http://localhost:' + port)))
        }, 2000);
    });
}

// exports all function and the app
module.exports.createServer = createServer;
module.exports.app = app;